import { BrowserWindow, FileFilter, OpenDialogOptions, dialog, shell } from 'electron'
import security from './SecurityService'
import server from './FlipFlipServer'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

class WindowManager {
  private static instance: WindowManager
  private window: BrowserWindow

  private constructor() {}

  public static getInstance(): WindowManager {
    if (WindowManager.instance == null) {
      WindowManager.instance = new WindowManager()
    }

    return WindowManager.instance
  }

  public createWindow(): void {
    // Create the browser window.
    this.window = new BrowserWindow({
      height: 600,
      width: 800,
      autoHideMenuBar: true,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
      }
    })

    this.window.webContents.session.setCertificateVerifyProc(
      (request, callback) => {
        const result = security().verifyCertificate(request)
        callback(result)
      }
    )

    this.window.loadURL(`${server().getServerURL()}/details`)
  }

  private async showOpenDialog(
    options: OpenDialogOptions
  ): Promise<string[] | undefined> {
    this.window.focus()
    this.window.setAlwaysOnTop(true)
    this.window.flashFrame(false)
    const returnValue = await dialog.showOpenDialog(this.window, options)
    this.window.setAlwaysOnTop(false)
    this.window.blur()
    this.window.flashFrame(false) // again make sure the window isn't flashing in the taskbar
    return !returnValue.canceled ? returnValue.filePaths : undefined
  }

  public async openAudioFiles (): Promise<string[] | undefined> {
    return await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        { name: 'Audio files', extensions: ['mp3', 'm4a', 'wav', 'ogg'] }
      ],
      properties: ['openFile', 'multiSelections']
    })
  }
  
  public async openTextFiles (): Promise<string[] | undefined> {
    return await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        { name: 'Text files', extensions: ['txt'] }
      ],
      properties: ['openFile', 'multiSelections']
    })
  }

  public async openJsonFile (): Promise<string | undefined> {
    const paths = await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        { name: 'JSON Document', extensions: ['json'] }
      ],
      properties: ['openFile']
    })
    return paths ? paths[0] : undefined
  }

  public async openSubtitleFile (): Promise<string | undefined> {
    const paths = await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        { name: 'Web Video Text Tracks (WebVTT)', extensions: ['vtt'] }
      ],
      properties: ['openFile']
    })
    return paths ? paths[0] : undefined
  }

  public async openTextFile (): Promise<string | undefined> {
    const paths = await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        { name: 'Text Document', extensions: ['txt'] }
      ],
      properties: ['openFile']
    })
    return paths ? paths[0] : undefined
  }

  public async openDirectory(): Promise<string[] | undefined> {
    return await this.showOpenDialog({
      filters: [{ name: 'All Files (*.*)', extensions: ['*'] }],
      properties: ['openDirectory']
    })
  }

  public async openDirectories(): Promise<string[] | undefined> {
    return await this.showOpenDialog({
      filters: [{ name: 'All Files (*.*)', extensions: ['*'] }],
      properties: ['openDirectory', 'multiSelections']
    })
  }

  public async openVideos (): Promise<string[] | undefined> {
    return await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        { name: 'Video files', extensions: ['mp4', 'mkv', 'webm', 'ogv', 'mov'] },
        { name: 'Playlist files', extensions: ['asx', 'm3u8', 'pls', 'xspf'] }
      ],
      properties: ['openFile', 'multiSelections']
    })
  }
  
  public async openImageFiles (): Promise<string[] | undefined> {
    return await this.showOpenDialog({
      filters: [
        { name: 'All Files (*.*)', extensions: ['*'] },
        {
          name: 'Image files',
          extensions: ['gif', 'png', 'jpeg', 'jpg', 'webp', 'tiff', 'svg']
        }
      ],
      properties: ['openFile']
    })
  }

  private async showSaveDialog (
    filters: FileFilter[],
    defaultPath: string
  ): Promise<string | undefined> {
    this.window.focus()
    this.window.setAlwaysOnTop(true)
    this.window.flashFrame(false)
    const options = { filters, defaultPath }
    const returnValue = await dialog.showSaveDialog(this.window, options)
    this.window.setAlwaysOnTop(false)
    this.window.blur()
    this.window.flashFrame(false) // again make sure the window isn't flashing in the taskbar
    return returnValue.filePath
  }

  public async saveTextFile (
    defaultPath: string
  ): Promise<string | undefined> {
    return await this.showSaveDialog(
      [{ name: 'Text Document', extensions: ['txt'] }],
      defaultPath
    )
  }
  
  public async saveJsonFile (
    defaultPath: string
  ): Promise<string | undefined> {
    return await this.showSaveDialog(
      [{ name: 'JSON Document', extensions: ['json'] }],
      defaultPath
    )
  }

  public openExternal(url: string) {
    shell.openExternal(url)
  }
}

export default function windowManager() {
  return WindowManager.getInstance()
}
